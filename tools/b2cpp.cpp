// - rlyeh

#include <wire/wire.hpp>
#include <wire/wire.cpp>

#include <sao/file.hpp>
#include <sao/file.cpp>

int main( int argc, char **argv )
{
	wire::strings args( argc, argv );

	for( auto &arg : args ) {
		sao::file file( arg );

		if( !file.size() )
			continue;

		wire::string data = file.read(), outdata;
		wire::string filename = wire::string( file.name() ).lowercase().replace(".","_").replace("-","_");

		outdata << wire::string(
			"// generated by b2cpp\n"
			"\n"
			"namespace \1\n"
			"{\n"
			"\tconst size_t size()\n"
			"\t{\n"
			"\t\treturn \2;\n"
			"\t}\n"
			"\tconst void * data()\n"
			"\t{\n"
			"\t\tstatic const unsigned char data[] = \n"
			"\t\t{\n",
			filename,
			file.size() );

		const int width = 16;

		for( size_t i = 0; i < data.size(); ++i )
		{
			std::string begin, end;

			begin = ( i % width == 0 ? "\t\t\t" : "," );
			end = ( i % width == width - 1 ? wire::string(", // \1..\2\n", i-(width-1),i ) : "" );

			if( i == data.size() - 1 )
				end = "\n";

			outdata << wire::format( "%s0x%02x%s", begin.c_str(), (unsigned char)data[i], end.c_str() );
		}

		outdata << wire::string(
			"\t\t};\n"
			"\t\n"
			"\t\treturn data;\n"
			"\t}\n"
			"}\n //namespace \1"
			"\n",
			filename );

		sao::file( file.name() + ".cpp" ).overwrite( outdata );
	}

	return 0;
}
